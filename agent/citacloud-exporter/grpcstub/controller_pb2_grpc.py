# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import blockchain_pb2 as blockchain__pb2
import common_pb2 as common__pb2
import controller_pb2 as controller__pb2


class RPCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBlockNumber = channel.unary_unary(
                '/controller.RPCService/GetBlockNumber',
                request_serializer=controller__pb2.Flag.SerializeToString,
                response_deserializer=controller__pb2.BlockNumber.FromString,
                )
        self.SendRawTransaction = channel.unary_unary(
                '/controller.RPCService/SendRawTransaction',
                request_serializer=controller__pb2.RawTransaction.SerializeToString,
                response_deserializer=common__pb2.Hash.FromString,
                )
        self.GetBlockByHash = channel.unary_unary(
                '/controller.RPCService/GetBlockByHash',
                request_serializer=common__pb2.Hash.SerializeToString,
                response_deserializer=blockchain__pb2.CompactBlock.FromString,
                )
        self.GetBlockByNumber = channel.unary_unary(
                '/controller.RPCService/GetBlockByNumber',
                request_serializer=controller__pb2.BlockNumber.SerializeToString,
                response_deserializer=blockchain__pb2.CompactBlock.FromString,
                )
        self.GetTransaction = channel.unary_unary(
                '/controller.RPCService/GetTransaction',
                request_serializer=common__pb2.Hash.SerializeToString,
                response_deserializer=controller__pb2.RawTransaction.FromString,
                )
        self.GetSystemConfig = channel.unary_unary(
                '/controller.RPCService/GetSystemConfig',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=controller__pb2.SystemConfig.FromString,
                )
        self.GetVersion = channel.unary_unary(
                '/controller.RPCService/GetVersion',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=controller__pb2.SoftwareVersion.FromString,
                )
        self.GetBlockHash = channel.unary_unary(
                '/controller.RPCService/GetBlockHash',
                request_serializer=controller__pb2.BlockNumber.SerializeToString,
                response_deserializer=common__pb2.Hash.FromString,
                )
        self.GetTransactionBlockNumber = channel.unary_unary(
                '/controller.RPCService/GetTransactionBlockNumber',
                request_serializer=common__pb2.Hash.SerializeToString,
                response_deserializer=controller__pb2.BlockNumber.FromString,
                )
        self.GetTransactionIndex = channel.unary_unary(
                '/controller.RPCService/GetTransactionIndex',
                request_serializer=common__pb2.Hash.SerializeToString,
                response_deserializer=controller__pb2.TransactionIndex.FromString,
                )
        self.GetPeerCount = channel.unary_unary(
                '/controller.RPCService/GetPeerCount',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=controller__pb2.PeerCount.FromString,
                )


class RPCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBlockNumber(self, request, context):
        """flag means latest or pending.
        true means pending, false means latest.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendRawTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockByHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockByNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockHash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionBlockNumber(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTransactionIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeerCount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RPCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBlockNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockNumber,
                    request_deserializer=controller__pb2.Flag.FromString,
                    response_serializer=controller__pb2.BlockNumber.SerializeToString,
            ),
            'SendRawTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.SendRawTransaction,
                    request_deserializer=controller__pb2.RawTransaction.FromString,
                    response_serializer=common__pb2.Hash.SerializeToString,
            ),
            'GetBlockByHash': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockByHash,
                    request_deserializer=common__pb2.Hash.FromString,
                    response_serializer=blockchain__pb2.CompactBlock.SerializeToString,
            ),
            'GetBlockByNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockByNumber,
                    request_deserializer=controller__pb2.BlockNumber.FromString,
                    response_serializer=blockchain__pb2.CompactBlock.SerializeToString,
            ),
            'GetTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransaction,
                    request_deserializer=common__pb2.Hash.FromString,
                    response_serializer=controller__pb2.RawTransaction.SerializeToString,
            ),
            'GetSystemConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemConfig,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=controller__pb2.SystemConfig.SerializeToString,
            ),
            'GetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVersion,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=controller__pb2.SoftwareVersion.SerializeToString,
            ),
            'GetBlockHash': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockHash,
                    request_deserializer=controller__pb2.BlockNumber.FromString,
                    response_serializer=common__pb2.Hash.SerializeToString,
            ),
            'GetTransactionBlockNumber': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionBlockNumber,
                    request_deserializer=common__pb2.Hash.FromString,
                    response_serializer=controller__pb2.BlockNumber.SerializeToString,
            ),
            'GetTransactionIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTransactionIndex,
                    request_deserializer=common__pb2.Hash.FromString,
                    response_serializer=controller__pb2.TransactionIndex.SerializeToString,
            ),
            'GetPeerCount': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeerCount,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=controller__pb2.PeerCount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'controller.RPCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RPCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBlockNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetBlockNumber',
            controller__pb2.Flag.SerializeToString,
            controller__pb2.BlockNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendRawTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/SendRawTransaction',
            controller__pb2.RawTransaction.SerializeToString,
            common__pb2.Hash.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockByHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetBlockByHash',
            common__pb2.Hash.SerializeToString,
            blockchain__pb2.CompactBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockByNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetBlockByNumber',
            controller__pb2.BlockNumber.SerializeToString,
            blockchain__pb2.CompactBlock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetTransaction',
            common__pb2.Hash.SerializeToString,
            controller__pb2.RawTransaction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSystemConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetSystemConfig',
            common__pb2.Empty.SerializeToString,
            controller__pb2.SystemConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetVersion',
            common__pb2.Empty.SerializeToString,
            controller__pb2.SoftwareVersion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBlockHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetBlockHash',
            controller__pb2.BlockNumber.SerializeToString,
            common__pb2.Hash.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactionBlockNumber(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetTransactionBlockNumber',
            common__pb2.Hash.SerializeToString,
            controller__pb2.BlockNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTransactionIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetTransactionIndex',
            common__pb2.Hash.SerializeToString,
            controller__pb2.TransactionIndex.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPeerCount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.RPCService/GetPeerCount',
            common__pb2.Empty.SerializeToString,
            controller__pb2.PeerCount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Consensus2ControllerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetProposal = channel.unary_unary(
                '/controller.Consensus2ControllerService/GetProposal',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.Proposal.FromString,
                )
        self.CheckProposal = channel.unary_unary(
                '/controller.Consensus2ControllerService/CheckProposal',
                request_serializer=common__pb2.Proposal.SerializeToString,
                response_deserializer=common__pb2.SimpleResponse.FromString,
                )
        self.CommitBlock = channel.unary_unary(
                '/controller.Consensus2ControllerService/CommitBlock',
                request_serializer=common__pb2.ProposalWithProof.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )


class Consensus2ControllerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetProposal(self, request, context):
        """Consensus request a Proposal to start consensus
        ret: proposal
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckProposal(self, request, context):
        """when Consensus received a new proposal from other nodes, it will ask controller to check it
        args: proposal hash
        ret: ok or not
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitBlock(self, request, context):
        """after Consensus, tell controller a proposal has committed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Consensus2ControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetProposal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProposal,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.Proposal.SerializeToString,
            ),
            'CheckProposal': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckProposal,
                    request_deserializer=common__pb2.Proposal.FromString,
                    response_serializer=common__pb2.SimpleResponse.SerializeToString,
            ),
            'CommitBlock': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitBlock,
                    request_deserializer=common__pb2.ProposalWithProof.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'controller.Consensus2ControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Consensus2ControllerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetProposal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.Consensus2ControllerService/GetProposal',
            common__pb2.Empty.SerializeToString,
            common__pb2.Proposal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckProposal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.Consensus2ControllerService/CheckProposal',
            common__pb2.Proposal.SerializeToString,
            common__pb2.SimpleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/controller.Consensus2ControllerService/CommitBlock',
            common__pb2.ProposalWithProof.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
