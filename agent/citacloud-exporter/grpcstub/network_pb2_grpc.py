# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import network_pb2 as network__pb2


class NetworkServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMsg = channel.unary_unary(
                '/network.NetworkService/SendMsg',
                request_serializer=network__pb2.NetworkMsg.SerializeToString,
                response_deserializer=common__pb2.StatusCode.FromString,
                )
        self.Broadcast = channel.unary_unary(
                '/network.NetworkService/Broadcast',
                request_serializer=network__pb2.NetworkMsg.SerializeToString,
                response_deserializer=common__pb2.StatusCode.FromString,
                )
        self.GetNetworkStatus = channel.unary_unary(
                '/network.NetworkService/GetNetworkStatus',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=network__pb2.NetworkStatusResponse.FromString,
                )
        self.RegisterNetworkMsgHandler = channel.unary_unary(
                '/network.NetworkService/RegisterNetworkMsgHandler',
                request_serializer=network__pb2.RegisterInfo.SerializeToString,
                response_deserializer=common__pb2.StatusCode.FromString,
                )
        self.AddNode = channel.unary_unary(
                '/network.NetworkService/AddNode',
                request_serializer=common__pb2.NodeNetInfo.SerializeToString,
                response_deserializer=common__pb2.StatusCode.FromString,
                )
        self.GetPeersNetInfo = channel.unary_unary(
                '/network.NetworkService/GetPeersNetInfo',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.TotalNodeNetInfo.FromString,
                )


class NetworkServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendMsg(self, request, context):
        """send message to a single peer.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Broadcast(self, request, context):
        """broadcast message to all peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNetworkStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterNetworkMsgHandler(self, request, context):
        """modules which need network register its msg handler.
        args: module name; hostname and port of handler
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddNode(self, request, context):
        """add new node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeersNetInfo(self, request, context):
        """get peers net info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMsg,
                    request_deserializer=network__pb2.NetworkMsg.FromString,
                    response_serializer=common__pb2.StatusCode.SerializeToString,
            ),
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=network__pb2.NetworkMsg.FromString,
                    response_serializer=common__pb2.StatusCode.SerializeToString,
            ),
            'GetNetworkStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNetworkStatus,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=network__pb2.NetworkStatusResponse.SerializeToString,
            ),
            'RegisterNetworkMsgHandler': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNetworkMsgHandler,
                    request_deserializer=network__pb2.RegisterInfo.FromString,
                    response_serializer=common__pb2.StatusCode.SerializeToString,
            ),
            'AddNode': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNode,
                    request_deserializer=common__pb2.NodeNetInfo.FromString,
                    response_serializer=common__pb2.StatusCode.SerializeToString,
            ),
            'GetPeersNetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeersNetInfo,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.TotalNodeNetInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'network.NetworkService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NetworkService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkService/SendMsg',
            network__pb2.NetworkMsg.SerializeToString,
            common__pb2.StatusCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkService/Broadcast',
            network__pb2.NetworkMsg.SerializeToString,
            common__pb2.StatusCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNetworkStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkService/GetNetworkStatus',
            common__pb2.Empty.SerializeToString,
            network__pb2.NetworkStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterNetworkMsgHandler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkService/RegisterNetworkMsgHandler',
            network__pb2.RegisterInfo.SerializeToString,
            common__pb2.StatusCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkService/AddNode',
            common__pb2.NodeNetInfo.SerializeToString,
            common__pb2.StatusCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPeersNetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkService/GetPeersNetInfo',
            common__pb2.Empty.SerializeToString,
            common__pb2.TotalNodeNetInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NetworkMsgHandlerServiceStub(object):
    """modules which need network must implement this service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessNetworkMsg = channel.unary_unary(
                '/network.NetworkMsgHandlerService/ProcessNetworkMsg',
                request_serializer=network__pb2.NetworkMsg.SerializeToString,
                response_deserializer=common__pb2.StatusCode.FromString,
                )


class NetworkMsgHandlerServiceServicer(object):
    """modules which need network must implement this service
    """

    def ProcessNetworkMsg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetworkMsgHandlerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessNetworkMsg': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessNetworkMsg,
                    request_deserializer=network__pb2.NetworkMsg.FromString,
                    response_serializer=common__pb2.StatusCode.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'network.NetworkMsgHandlerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NetworkMsgHandlerService(object):
    """modules which need network must implement this service
    """

    @staticmethod
    def ProcessNetworkMsg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/network.NetworkMsgHandlerService/ProcessNetworkMsg',
            network__pb2.NetworkMsg.SerializeToString,
            common__pb2.StatusCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
